{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Appium\r\n=========\r\n\r\n[![Build Status](https://api.travis-ci.org/appium/appium.png?branch=master)](https://travis-ci.org/appium/appium)\r\n\r\nAppium is a test automation tool for use with native and hybrid iOS applications. It uses the webdriver JSON  wire protocol to drive Apple's UIAutomation. Appium is based on [Dan Cuellar's](http://github.com/penguinho) work on iOS Auto.\r\n\r\nThere are two big benefits to testing with Appium:\r\n\r\n1.  Appium uses Apple's UIAutomation library under the hood to perform the automation, which means you do not have to recompile your app or modify in any way to be able to test automate it.\r\n2.  With Appium, you are able to write your test in your choice of programming language, using the Selenium WebDriver API and language-specific client libraries. If you only used UIAutomation, you would be required to write tests in JavaScript, and only run the tests through the Instruments application. With Appium, you can test your native iOS app with any language, and with your preferred dev tools.\r\n\r\nRequirements\r\n------------\r\n\r\n    > Mac OSX 10.6 +\r\n    > XCode\r\n    > Apple Developer Tools (iphone simulator, command line tools)\r\n\r\nNinja-speed Setup\r\n------------\r\nInstall [node.js](http://nodejs.org/) which come with its package manager [npm](https://npmjs.org/).\r\n\r\n    > sudo npm install appium -g\r\n    > appium --app /path/to/your/ios/app &\r\n    > node your-appium-test.js\r\n\r\nPrerequisite\r\n------------\r\nInstall [node.js](http://nodejs.org/) which come with its package manager [npm](https://npmjs.org/).\r\nChange into your local repo clone and install packages using following commands:\r\n\r\n    > sudo npm install -g mocha\r\n    > sudo npm install -g grunt\r\n    > npm install\r\n\r\nFirst two commands will make test and build tools available (sudo may not be necessary if you installed node.js through homebrew). The third command will install all app dependencies.\r\n\r\nTo avoid a security dialog that can appear when launching your iOS app, you need to modify your /etc/authorization file. You can do this by settings the element following &lt;allow-root&gt; under &lt;key&gt;system.privilege.taskport&lt;/key&gt; to &lt;true/&gt; or by running the supplied grunt task (at your own risk)\r\n\r\n    > sudo grunt authorize\r\n\r\nQuick Start\r\n-----------\r\nDownload UICatalog:\r\n\r\n    > grunt downloadApp\r\n\r\nBuild an app:\r\n\r\n    > grunt buildApp:UICatalog\r\n    > grunt buildApp:TestApp\r\n\r\nRun functional tests against TestApp:\r\n\r\n    > grunt functional\r\n\r\nRun unit tests against TestApp:\r\n\r\n    > grunt unit\r\n\r\nRun tests against UICatalog:\r\n\r\n    > grunt uicatalog\r\n\r\nRun all tests against TestApp and UICatalog:\r\n\r\n    > grunt test\r\n\r\nBefore commiting code please run grunt to run test and check your changes against code quality standards:\r\n\r\n    > grunt\r\n    Running \"lint:all\" (lint) task\r\n    Lint free.\r\n\r\n    Done, without errors.\r\n\r\nMore things, low-level things\r\n-----------\r\nIf you want to run the appium server and have it listen indefinitely, you can\r\ndo one of the following:\r\n\r\n    > grunt appium:TestApp\r\n    > grunt appium:UICatalog\r\n\r\nThen you can, e.g., run individual testfiles using Mocha directly:\r\n\r\n    > mocha -t 60000 -R spec test/functional/simple.js\r\n\r\nDo you like getting close to the metal? Or are you trying to run this from\r\na script with a custom app? Start appium without grunt from the\r\ncommand line (see parser.js for more CLI arguments):\r\n\r\n    > node server.js --app /absolute/path/to/app -V 1\r\n\r\nIn this case, the app has to be compiled for the iphone simulator, e.g., by\r\ndoing this in the Xcode project:\r\n\r\n    > xcodebuild -sdk iphonesimulator6.0\r\n\r\nThis will create a directory called build/Release-iphonesimulator in your Xcode\r\nproject, and this dir will contain the .app package you need to send to the\r\nserver.\r\n\r\nYou can also run against an app on an actual device by plugging the device in\r\nand passing the udid argument to server.js in the command above.\r\n\r\nUsing with a [Bitbeambot](http://bitbeam.org)\r\n-----------\r\nAWAITING THE FUTURE\r\n\r\nContributing\r\n------------\r\nFork the project, make a change, and send a pull request!\r\n\r\nMailing List\r\n-----------\r\n[Discussion Group](https://groups.google.com/d/forum/appium-discuss)","name":"Appium","tagline":"Automation for Apps"}